name: CI • Build • Test • Pack & Deploy

# Triggers:
# - Build & test on master pushes and PRs
# - Release and publish on semantic-version tag pushes (e.g. v1.2.3)
# - Manual dispatch for flexibility
on:
  push:
    branches:
      - master
      - 'feature/**'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - '**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release, e.g. 1.2.3'
        required: true
      release_notes:
        description: 'Release notes for the GitHub Release'
        required: false

permissions:
  contents: read
  packages: write
  actions: read

jobs:

  # ----------------------------------------------
  # Build & Test
  # ----------------------------------------------
  build-test-pack:
    name: Build & Test
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Cache NuGet packages and build artifacts
        uses: actions/cache@v3
        with:
          path: |
            ~/.nuget/packages
            ~/.dotnet/tools
            **/obj
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}

      - name: Setup .NET 9 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
          cache: false # TODO
          
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v2

      - name: Restore packages
        shell: pwsh
        run: |
          msbuild JPSoftworks.CommandPalette.Extensions.Toolkit.slnx /t:Restore /p:Configuration=Release

      - name: Build
        shell: pwsh
        run: |
          msbuild JPSoftworks.CommandPalette.Extensions.Toolkit.slnx /p:Configuration=Release

      - name: Run unit tests
        shell: pwsh
        run: |
          dotnet test JPSoftworks.CommandPalette.Extensions.Toolkit.slnx --configuration Release --no-build --no-restore

      - name: Pack to Nuget
        id: pack
        shell: pwsh
        run: |
            # Determine version: manual > tag-driven > feature-preview
            if ($env:GITHUB_EVENT_NAME -eq 'workflow_dispatch' -and $env:GITHUB_EVENT_INPUTS_VERSION) {
                $version = $env:GITHUB_EVENT_INPUTS_VERSION
            } elseif ($env:GITHUB_EVENT_NAME -eq 'pull_request' -or $env:GITHUB_REF.StartsWith('refs/heads/feature/')) {
                $branchName = $env:GITHUB_REF -replace '^refs/heads/', ''
                try {
                    $lastTagRaw = git describe --tags --abbrev=0 2>$null
                    if (-not $lastTagRaw) {
                        $lastTag = "0.0.0"
                        $commitsSince = (git rev-list HEAD --count)
                    } else {
                        $lastTag = $lastTagRaw -replace '^v', ''
                        $commitsSince = (git rev-list "$lastTagRaw..HEAD" --count)
                    }
                } catch {
                    $lastTag = "0.0.0"
                    $commitsSince = (git rev-list HEAD --count)
                }
                $safeBranch = $branchName -replace '/', '-'
                $version = "$lastTag-ci-$safeBranch.$commitsSince"
            } else {
                $lastTagRaw = git describe --tags --abbrev=0
                $version = $lastTagRaw -replace '^v', ''
            }

            Write-Host "Using version $version"

            $artifactsFolder = Join-Path $env:GITHUB_WORKSPACE "artifacts"
            msbuild src/JPSoftworks.CommandPalette.Extensions.Toolkit/JPSoftworks.CommandPalette.Extensions.Toolkit.csproj `
                /t:Pack /p:Configuration=Release /p:NoBuild=true /p:NoRestore=true /p:PackageVersion=$version /p:PackageOutputPath=$artifactsFolder

            Write-Host "Checking contents of $artifactsFolder"
            Get-ChildItem -Path $artifactsFolder -Recurse | Out-String | Write-Host

            if (!(Test-Path "$artifactsFolder/*.nupkg")) {
            Write-Error "NuGet package was not created. Check msbuild logs for Pack errors."
            exit 1
            }

            $nupkgPath = Get-ChildItem "$artifactsFolder/*.nupkg" | Select-Object -ExpandProperty FullName
            "nupkg-path=$nupkgPath" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
            "version=$version" | Out-File -Append -FilePath $env:GITHUB_OUTPUT

      - name: Upload NuGet package
        uses: actions/upload-artifact@v4
        with:
          name: nupkg
          path: |
              artifacts/*.nupkg
              artifacts/*.snupkg

  # ----------------------------------------------
  # Publish preview to GitHub Packages
  # ----------------------------------------------
  publish-preview:
    name: Publish Preview
    needs: build-test-pack
    if: startsWith(github.ref, 'refs/heads/feature/')
    runs-on: windows-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: nupkg
          path: artifacts

      - name: Push to GitHub Packages
        shell: pwsh
        run: |
          
          Write-Host "Checking contents of artifacts folder"
          Get-ChildItem ./artifacts/*.nupkg -ErrorAction SilentlyContinue

          dotnet nuget push "artifacts\*.nupkg" `
            --api-key ${{ secrets.GITHUB_TOKEN }} `
            --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json

  # ----------------------------------------------
  # Publish release
  # ----------------------------------------------
  publish-release:
    name: Publish Release
    needs: build-test-pack
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    runs-on: windows-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: nupkg
          path: artifacts

      - name: Push to NuGet.org
        shell: pwsh
        run: |
          Write-Host "Checking contents of artifacts folder"
          Get-ChildItem ./artifacts/*.nupkg -ErrorAction SilentlyContinue

          dotnet nuget push "artifacts\*.nupkg" `
            --api-key ${{ secrets.NUGET_API_KEY }} `
            --source https://api.nuget.org/v3/index.json

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ needs.build-test-pack.outputs.version }}
          release_name: Release ${{ needs.build-test-pack.outputs.version }}
          body: |
            ${{ github.event.inputs.release_notes }}
          draft: false
          prerelease: false

      - name: Upload NuGet to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/*.nupkg
          asset_name: ${{ needs.build-test-pack.outputs.version }}.nupkg
          asset_content_type: application/octet-stream