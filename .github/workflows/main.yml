name: CI • Build • Test • Pack & Deploy

# Triggers:
# - Build & test on master pushes and PRs
# - Release and publish on semantic-version tag pushes (e.g. v1.2.3)
# - Manual dispatch for flexibility
on:
  push:
    branches:
      - master
      - master-test
      - 'feature/**'
      - 'hotfix/**'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - '**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release, e.g. 1.2.3'
        required: true
      release_notes:
        description: 'Release notes for the GitHub Release'
        required: false

permissions:
  contents: read
  packages: write
  actions: read

env:
  PackageName: JPSoftworks.CommandPalette.Extensions.Toolkit

jobs:

  # ----------------------------------------------
  # Build & Test
  # ----------------------------------------------
  build-test-pack:
    name: Build & Test
    runs-on: windows-latest

    env:
      SolutionName: JPSoftworks.CommandPalette.Extensions.Toolkit.slnx
      ProjectPath: src/JPSoftworks.CommandPalette.Extensions.Toolkit/JPSoftworks.CommandPalette.Extensions.Toolkit.csproj
      BuildConfiguration: Release

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Cache NuGet packages and build artifacts
        uses: actions/cache@v3
        with:
          path: |
            ~/.nuget/packages
            ~/.dotnet/tools
            **/obj
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Setup .NET 9 SDK
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: ./global.json
          
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v2

      - name: Restore packages
        shell: pwsh
        run: |
          msbuild $env:SolutionName /t:Restore /p:Configuration=$env:BuildConfiguration

      - name: Build
        shell: pwsh
        run: |
          msbuild $env:SolutionName /p:Configuration=$env:BuildConfiguration

      - name: Run unit tests
        shell: pwsh
        run: |
          dotnet test $env:SolutionName --configuration $env:BuildConfiguration --no-build --no-restore
      
      - name: Get Version
        id: version
        uses: ./.github/actions/get-version
        with:
          github-event-name: ${{ github.event_name }}
          github-ref: ${{ github.ref }}
          version-override: ${{ github.event.inputs.version || '' }}

      - name: Pack to NuGet
        uses: ./.github/actions/pack-nuget
        with:
          projectPath:   ${{ env.ProjectPath }}
          version:       ${{ steps.version.outputs.version }}
          workspace:     ${{ github.workspace }}
          configuration: ${{ env.BuildConfiguration }}

      - name: Upload NuGet package artifact
        uses: actions/upload-artifact@v4
        with:
          name: nupkg          
          if-no-files-found: error
          path: artifacts/

  # ----------------------------------------------
  # Publish preview to GitHub Packages
  # ----------------------------------------------
  publish-preview:
    name: Publish Preview
    needs: build-test-pack
    if: startsWith(github.ref, 'refs/heads/feature/') || startsWith(github.ref, 'refs/heads/hotfix/')
    runs-on: windows-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: nupkg
          path: artifacts

      - name: Push to GitHub Packages
        shell: pwsh
        run: |
          
          Write-Host "Checking contents of artifacts folder"
          Get-ChildItem ./artifacts/*.nupkg -ErrorAction SilentlyContinue

          dotnet nuget push "artifacts\*.nupkg" `
            --api-key ${{ secrets.GITHUB_TOKEN }} `
            --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json

  # ----------------------------------------------
  # Publish release
  # ----------------------------------------------
  publish-release:
    name: Publish Release
    needs: build-test-pack
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    runs-on: windows-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: nupkg
          path: artifacts

      - name: Push to NuGet.org
        shell: pwsh
        run: |
          Write-Host "Checking contents of artifacts folder"
          Get-ChildItem ./artifacts/*.nupkg -ErrorAction SilentlyContinue

          dotnet nuget push "artifacts\*.nupkg" `
            --api-key ${{ secrets.NUGET_API_KEY }} `
            --source https://api.nuget.org/v3/index.json

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ needs.build-test-pack.outputs.version }}
          release_name: Release ${{ needs.build-test-pack.outputs.version }}
          body: |
            ${{ github.event.inputs.release_notes }}
          draft: false
          prerelease: false

      - name: Upload NuGet to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/*.nupkg
          asset_name: ${{ needs.build-test-pack.outputs.version }}.nupkg
          asset_content_type: application/octet-stream

      - name: Upload NuGet Symbols to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/*.snupkg
          asset_name: ${{ needs.build-test-pack.outputs.version }}.snupkg
          asset_content_type: application/octet-stream